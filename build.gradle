plugins {
    id 'org.springframework.boot' version "2.6.2"
    id "de.undercouch.download" version "5.2.1"
    id 'java'
}

group 'sky'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url("https://repo.spring.io/snapshot")
    }
}

configurations {
    all {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
    }
}


dependencies {
    implementation("io.projectreactor.kafka:reactor-kafka:1.3.22-SNAPSHOT")
    implementation("io.micrometer:micrometer-tracing-bridge-otel:1.1.6")
//    implementation("io.projectreactor:reactor-core-micrometer:1.0.11")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.3")
    implementation("org.springframework.boot:spring-boot-starter:3.1.5")
    implementation("org.springframework.boot:spring-boot-configuration-processor:3.1.5")
    implementation("ch.qos.logback:logback-core:1.2.6")
    implementation("org.slf4j:slf4j-api:1.7.30")
    implementation 'org.jetbrains:annotations:23.0.0'
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:3.1.5")
    annotationProcessor("org.springframework.boot:spring-boot-autoconfigure:3.1.5")
    implementation("org.springframework.boot:spring-boot-starter-actuator:3.1.5")
    implementation("io.micrometer:micrometer-observation") {
        version {
            strictly "1.11.5"
        }
    }
    implementation("org.springframework.boot:spring-boot-starter-parent:3.1.5")
    implementation("org.springframework.boot:spring-boot-starter-webflux:3.1.5")
    implementation("org.springframework.boot:spring-boot-starter-validation:3.1.5")
    implementation("javax.annotation:jsr250-api:1.0")
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.13.4')
//    implementation("io.projectreactor.kafka:reactor-kafka:1.3.12")
    implementation("io.projectreactor.kafka:reactor-kafka-tools:1.3.12")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.13.4')
    implementation("io.projectreactor:reactor-core:3.4.23")
    compileOnly('org.projectlombok:lombok:1.18.24')
    annotationProcessor("org.projectlombok:lombok:1.18.22")
    implementation("io.github.resilience4j:resilience4j-reactor:1.7.1")
    testCompileOnly("org.projectlombok:lombok:1.18.22")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
    testImplementation("org.assertj:assertj-core:3.23.1")
    testImplementation("org.springframework.boot:spring-boot-starter-test:3.1.5")
    testImplementation("org.junit.platform:junit-platform-commons:1.9.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    testImplementation('org.testcontainers:kafka:1.17.4')
    testImplementation('org.testcontainers:junit-jupiter:1.17.4')
    implementation "org.springframework:spring-web:+"
    implementation "org.springframework.kafka:spring-kafka:3.0.12"
    testImplementation "org.springframework.kafka:spring-kafka-test:3.0.12"
    testImplementation "io.projectreactor:reactor-test:+"
}

test {
    useJUnitPlatform()

}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}
tasks.withType(Test).all {
    jvmArgs += '--enable-preview'
    jvmArgs += '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
}
tasks.withType(JavaCompile).all {
    options.compilerArgs += ['--enable-preview']
    options.compilerArgs += ['--add-opens=java.base/sun.nio.ch=ALL-UNNAMED']
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava {
    options.compilerArgs += ["--enable-preview"]
}